name: release

on:
  push:
    tags: [ '*.*.*', '*.*.*-*' ]

env:
  LATEST: '6.0.0'
  REGISTRY: docker.io
  IMAGE_NAME: ${{ github.repository }}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  docker:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up QEMU
        id: qemu
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log into dockerhub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Get release version
        run: echo "TAG=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_ENV

      - name: Extract Docker metadata for latest
        if: env.TAG == env.LATEST
        id: meta-latest
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          flavor: |
            latest=true

      - name: Extract Docker metadata
        if: env.TAG != env.LATEST
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          flavor: |
            latest=false

      - name: Build and push Docker image for latest
        if: env.TAG == env.LATEST
        uses: docker/build-push-action@v3
        with:
          context: parse/.
          platforms: linux/amd64, linux/arm/v6, linux/arm/v7, linux/arm64/v8
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta-latest.outputs.tags }}
          labels: ${{ steps.meta-latest.outputs.labels }}

      - name: Build and push Docker image
        if: env.TAG != env.LATEST
        uses: docker/build-push-action@v3
        with:
          context: parse/.
          platforms: linux/amd64, linux/arm/v6, linux/arm/v7, linux/arm64/v8
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  singularity:
    needs: docker
    runs-on: ubuntu-latest
    container:
      image: quay.io/singularity/singularity:v3.10.4
    strategy:
      fail-fast: false
      matrix:
        recipe: ["Singularity"]

    steps:
      - name: Check out code for the container build
        uses: actions/checkout@v3

      - name: Continue if Singularity recipe exists
        run: |
          if [[ -f "${{ matrix.recipe }}" ]]; then
            echo "keepgoing=true" >> $GITHUB_ENV
          fi          

      - name: Get release version
        run: echo "TAG=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_ENV

      - name: Update Singularity file tag
        run: |
          sed -i "s/latest/$TAG/" ./Singularity

      - name: Build Singularity image
        env:
          recipe: ${{ matrix.recipe }}
        run: |
         ls 
         if [ -f "${{ matrix.recipe }}" ]; then
            sudo -E singularity build container.sif ${{ matrix.recipe }}
            tag=$(echo "${recipe/Singularity\./}")
            if [ "$tag" == "Singularity" ]; then
                tag=$TAG
            fi
            # Build the container and name by tag
            echo "Tag is $tag."
            echo "tag=$tag" >> $GITHUB_ENV
         else
           echo "${{ matrix.recipe }} is not found."
           echo "Present working directory: $PWD"
           ls
         fi

      - name: Login and deploy container
        env:
          keepgoing: ${{ env.keepgoing }}
        run: |         
            if [[ "${keepgoing}" == "true" ]]; then
                echo ${{ secrets.GITHUB_TOKEN }} | singularity remote login -u ${{ secrets.GHCR_USERNAME }} --password-stdin oras://ghcr.io
                singularity push container.sif oras://ghcr.io/${GITHUB_REPOSITORY}:${tag}
            fi

      - name: Login and deploy latest container
        if: env.TAG == env.LATEST
        env:
          keepgoing: ${{ env.keepgoing }}
        run: |
            if [[ "${keepgoing}" == "true" ]]; then
                echo ${{ secrets.GITHUB_TOKEN }} | singularity remote login -u ${{ secrets.GHCR_USERNAME }} --password-stdin oras://ghcr.io
                singularity push container.sif oras://ghcr.io/${GITHUB_REPOSITORY}:latest
            fi

